<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--https://maivve.tistory.com/348-->

<mapper namespace="friend">
    <select id="selectFriend" parameterType="java.util.Map" resultMap="dto.friend">
        <include refid="common.CUTOFF_RS">
            <property name="email" value="${fromId}"/>
            <property name="target" value="from"/>
            <property name="who" value="to"/>
        </include>
        select A.ID                                                   AS ID,
               A.EMAIL                                                AS EMAIL,
               DECODE(B.NICKNAME, null, A.NAME, B.NICKNAME)           AS NAME,
               DECODE(B.CUTOFF_RS, '1', A.MESSAGE, null)              AS MESSAGE,
               DECODE(B.CUTOFF_RS, '1', A.PROFILE_IMAGE_URL, null)    AS PROFILE_IMAGE_URL,
               DECODE(B.CUTOFF_RS, '1', A.BACKGROUND_IMAGE_URL, null) AS BACKGROUND_IMAGE_URL,
               to_char(B.STATUS)                                      AS STATUS
        from kakao_users A
                 JOIN CUTOFF_RS B
                      ON A.email = B.TO_ID
        where A.status = 1
          AND B.TO_ID = #{toId}
    </select>

    <select id="selectFriendList" parameterType="java.lang.String" resultMap="dto.friend">
        <include refid="common.CUTOFF_RS">
            <property name="email" value="${email}"/>
            <property name="target" value="from"/>
            <property name="who" value="to"/>
        </include>
        select
        A.ID AS ID,
        A.EMAIL AS EMAIL,
        DECODE(B.NICKNAME, null, A.NAME, B.NICKNAME) AS NAME,
        DECODE(B.CUTOFF_RS,'1' , A.MESSAGE , null) AS MESSAGE,
        DECODE(B.CUTOFF_RS,'1' , A.PROFILE_IMAGE_URL, null) AS PROFILE_IMAGE_URL,
        DECODE(B.CUTOFF_RS,'1' , A.BACKGROUND_IMAGE_URL , null) AS BACKGROUND_IMAGE_URL,
        to_char(B.STATUS) AS STATUS
        from kakao_users A
        JOIN CUTOFF_RS B
        ON A.email = B.TO_ID
        where B.status = 1
        and A.status = 1
    </select>

    <!-- 나를 추가한 친구 ( -나는 추가하지 않은 친구 ) -->
    <select id="selectAddedMeFriendList" parameterType="java.util.Map" resultMap="dto.friend">
        <include refid="common.CUTOFF_RS">
            <property name="email" value="${email}"/>
            <property name="target" value="to"/>
            <property name="who" value="from"/>
        </include>
        select
        A.ID,
        A.EMAIL,
        A.NAME AS NAME,
        DECODE(B.CUTOFF_RS,'1' , A.MESSAGE , null) AS MESSAGE,
        DECODE(B.CUTOFF_RS,'1' , A.PROFILE_IMAGE_URL, null) AS PROFILE_IMAGE_URL,
        DECODE(B.CUTOFF_RS,'1' , A.BACKGROUND_IMAGE_URL , null) AS BACKGROUND_IMAGE_URL,
        to_char(B.STATUS) AS STATUS
        from kakao_users A
        join CUTOFF_RS B
        on B.from_id = A.email
        where A.status = 1
        and B.status = 1
        and from_id not in
        (select to_id
        from kakao_friends
        where from_id = #{email} )
    </select>

    <!--  차단 목록  -->
    <select id="selectBlockList" parameterType="java.lang.String" resultMap="dto.friend">
        <include refid="common.CUTOFF_RS">
            <property name="email" value="${email}"/>
            <property name="target" value="from"/>
            <property name="who" value="to"/>
        </include>
        select
        A.ID,
        A.EMAIL,
        A.NAME,
        DECODE(B.CUTOFF_RS,'1' , A.MESSAGE , null) AS MESSAGE,
        DECODE(B.CUTOFF_RS,'1' , A.PROFILE_IMAGE_URL, null) AS PROFILE_IMAGE_URL,
        DECODE(B.CUTOFF_RS,'1' , A.BACKGROUND_IMAGE_URL , null) AS BACKGROUND_IMAGE_URL,
        to_char(B.STATUS) AS STATUS
        from kakao_users A
        join CUTOFF_RS B
        on A.email = B.to_id
        where B.status = 2
        and A.status = 1
    </select>


    <!--  유저 입력  -->
    <insert id="insertFriend" parameterType="java.util.Map">
        insert into kakao_friends
        (from_id,
         to_id,
         status,
         createAt)
        values (#{fromId},
                #{toId},
                1,
                sysdate)
    </insert>

    <!--  유저 별명 설정   -->
    <update id="updateFriendNickname" parameterType="com.oauth2.sample.domain.friend.request.UpdateFriendRequest">
        update kakao_friends
        <if test="nickname != '' and nickname != null">
            set nickname = #{nickname},
        </if>
        updateAt = sysdate
        where from_id = #{fromId}
        and to_id = #{toId}
    </update>

    <update id="updateFriendStatus" parameterType="java.util.Map">
        update kakao_friends
        set status   = 1,
            nickname = '',
            updateAt = sysdate
        where from_id = #{fromId}
          and to_id = #{toId}
    </update>

    <!-- 유저 차단 -->
    <update id="blockFriend" parameterType="java.util.Map">
        update kakao_friends
        set status   = 2,
            nickname = '',
            updateAt = sysdate
        where from_id = #{fromId}
          and to_id = #{toId}
    </update>

    <!--  삭제  -->
    <update id="removeFriend" parameterType="java.util.Map">
        update kakao_friends
        set status   = 3,
            nickname = '',
            updateAt = sysdate
        where from_id = #{fromId}
          and to_id = #{toId}
    </update>
</mapper>