<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat">
    <insert id="insertChat" parameterType="com.oauth2.sample.domain.chat.dto.Chat">
        <selectKey keyProperty="chatId" resultType="String" order="BEFORE">
            select nvl(max(chat_id), 1) + 1 chatId from kakao_chats where room_id = #{roomId}
        </selectKey>
        INSERT INTO kakao_chats
        (chat_id,
        email,
        room_id,
        status,
        type,
        content,
        createAt)
        values (
        #{chatId, jdbcType=VARCHAR},
        #{email, jdbcType=VARCHAR},
        #{roomId, jdbcType=VARCHAR},
        1,
        #{chatType, jdbcType=VARCHAR},
        #{content, jdbcType=VARCHAR},
        <choose>
            <when test="createAt != '' and createAt != null">
                to_date(#{createAt}, 'YYYY-MM-DD HH24:MI:SS')
            </when>
            <otherwise>
                sysdate
            </otherwise>
        </choose>
        )
    </insert>

    <insert id="insertReadUser" parameterType="java.util.Map">
        insert into KAKAO_READ_USERS(email, room_id, chat_id, createAt)
        values (
        #{email},
        #{roomId},
        #{chatId},
        <choose>
            <when test="createAt != '' and createAt != null">
                to_date(#{createAt}, 'YYYY-MM-DD HH24:MI:SS')
            </when>
            <otherwise>
                sysdate
            </otherwise>
        </choose>
        )
    </insert>

    <delete id="removeReadUser" parameterType="java.util.Map">
        delete
        kakao_read_users
        where email =
        #{email}
        and
        room_id
        =
        #{roomId}
    </delete>

    <select id="selectChatList">
        select a.chat_id,
               a.EMAIL,
               DECODE(A.STATUS, '1', A.CONTENT, null) as CONTENT,
               a.status,
               a.type,
               a.seq,
               a.createAt
        from (select A.chat_id,
                     A.content,
                     A.EMAIL,
                     A.status,
                     A.type,
                     dense_rank() over (order by A.createAt desc) as seq, A.createAt --sub start
              from kakao_chats A
                       join kakao_join_users B on A.room_id = B.room_id
              where B.createAt &lt;= A.createAt
                and B.EMAIL = 'y2010214@naver.com'
                and A.room_id = 32
                and A.) A --sub end
        where seq >= 1
          and seq &lt;= 20 -- start ~ end
        order by seq,
                 chat_id desc;
    </select>
</mapper>