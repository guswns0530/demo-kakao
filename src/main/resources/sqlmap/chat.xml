<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat">
    <insert id="insertChat" parameterType="com.oauth2.sample.domain.chat.dto.Chat">
        <selectKey keyProperty="chatId" resultType="String" order="BEFORE">
            select nvl(max(chat_id), 1) + 1 chatId from kakao_chats where room_id = #{roomId}
        </selectKey>
        INSERT INTO kakao_chats
        (chat_id,
        email,
        room_id,
        status,
        type,
        content,
        createAt)
        values (
        #{chatId, jdbcType=VARCHAR},
        #{email, jdbcType=VARCHAR},
        #{roomId, jdbcType=VARCHAR},
        1,
        #{chatType, jdbcType=VARCHAR},
        #{content, jdbcType=VARCHAR},
        <choose>
            <when test="createAt != '' and createAt != null">
                to_date(#{createAt}, 'YYYY-MM-DD HH24:MI:SS')
            </when>
            <otherwise>
                sysdate
            </otherwise>
        </choose>
        )
    </insert>

    <insert id="insertReadUser" parameterType="java.util.Map">
        insert into KAKAO_READ_USERS(email, room_id, chat_id, createAt)
        values (
        #{email},
        #{roomId},
        #{chatId},
        <choose>
            <when test="createAt != '' and createAt != null">
                to_date(#{createAt}, 'YYYY-MM-DD HH24:MI:SS')
            </when>
            <otherwise>
                sysdate
            </otherwise>
        </choose>
        )
    </insert>

    <delete id="removeReadUser" parameterType="java.util.Map">
        delete
        kakao_read_users
        where email =
        #{email}
        and
        room_id
        =
        #{roomId}
    </delete>

    <!--    <select id="selectChatList">-->
    <!--        select a.chat_id,-->
    <!--        a.room_id,-->
    <!--        a.email,-->
    <!--        DECODE(A.STATUS, '1', A.CONTENT, null) as content,-->
    <!--        a.status,-->
    <!--        a.type,-->
    <!--        a.createAt-->
    <!--        from (select A.chat_id,-->
    <!--        A.content,-->
    <!--        A.EMAIL,-->
    <!--        A.status,-->
    <!--        A.type,-->
    <!--        dense_rank() over (order by A.createAt desc) as seq, A.createAt &#45;&#45;sub start-->
    <!--        from kakao_chats A-->
    <!--        where A.createAt >= (select NVL(B.CREATEAT, sysdate)-->
    <!--        from KAKAO_READ_USERS B-->
    <!--        where B.EMAIL = 'y2010212@naver.com'-->
    <!--        and B.ROOM_ID = A.ROOM_ID)-->
    <!--        and A.room_id = 46) A &#45;&#45;sub end-->
    <!--        <choose>-->
    <!--            <when test="">-->
    <!--            </when>-->
    <!--            <otherwise>-->
    <!--            </otherwise>-->
    <!--        </choose>-->
    <!--        order by seq,-->
    <!--        chat_id desc-->

    <select id="selectChat" parameterType="com.oauth2.sample.domain.chat.request.SelectChatRequest"
            resultMap="dto.chat">
        select CHAT_ID,
               ROOM_ID,
               EMAIL,
               DECODE(STATUS, '1', CONTENT, null)         as CONTENT,
               STATUS,
               TYPE,
               to_char(CREATEAT, 'YYYY-MM-DD HH24:MI:SS') as CREATEAT
        from KAKAO_CHATS
        where ROOM_ID = #{roomId, jdbcType=VARCHAR}
          and EMAIL = #{email}
          and CHAT_ID = #{chatId, jdbcType=VARCHAR}
    </select>

    <delete id="removeChat" parameterType="com.oauth2.sample.domain.chat.request.RemoveChatRequest">
        update KAKAO_CHATS set STATUS = 2
        where CHAT_ID = #{chatId}
          and ROOM_ID = #{roomId}
          and EMAIL = #{email}
    </delete>
</mapper>