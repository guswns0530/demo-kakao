<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="room">
    <select id="selectRoomList" parameterType="java.util.Map" resultMap="dto.roomInfo">
        <include refid="common.CUTOFF_RS">
            <property name="email" value="${email}"/>
            <property name="target" value="from"/>
            <property name="who" value="from"/>
        </include>

        select C.room_id as ROOM_ID,
        nvl(C.NAME, '') as ROOM_NAME,
        '[' || LISTAGG(
        '{' ||
        ' "id" : "' || F.ID || '",' ||
        ' "email" : "' || D.EMAIL || '",' ||
        ' "name" : "' || nvl(DECODE(E.CUTOFF_RS, 1, E.nickname, null), F.NAME) || '",' ||
        ' "profileImageUrl" : "' || F.profile_image_url || '",' ||
        ' "message" : "' || DECODE(E.CUTOFF_RS, 1, F.MESSAGE, null) || '",' ||
        ' "provider" : "' || F.PROVIDER || '",' ||
        ' "lastReadChat" : "' || G.CHAT_ID || '",' ||
        ' "status" : "' || NVL(E.status, 0) || '"' ||
        '}', ', ')
        within group ( order by E.nickname, F.NAME) || ']' as USERS,
        C.type as ROOM_TYPE,
        count(D.EMAIL) as JOIN_USER_CNT,
        DECODE(G.CHAT_STATUS, 1, G.CHAT_CONTENT, null) as CHAT_CONTENT,
        G.CHAT_TYPE,
        G.CHAT_STATUS,
        to_char(G.CHAT_CREATEAT, 'YYYY-MM-DD HH24:MI:SS') as CHAT_CREATEAT,
        to_char(C.CREATEAT, 'YYYY-MM-DD HH24:MI:SS') as ROOM_CREATEAT,
        (select count(*)
        from kakao_chats G
        where G.room_id = C.room_Id
        and G.CHAT_ID > (select chat_id
        from KAKAO_READ_USERS
        where room_id = G.room_id
        and EMAIL = #{email} and status in (1, 2))) as UNREAD_CNT
        from kakao_join_users B
        join kakao_rooms C
        on B.ROOM_ID = C.ROOM_ID
        left outer join (select E.ROOM_ID,
        max (E.CONTENT) keep (
        DENSE_RANK last
        order by
        E.CREATEAT,
        E.CHAT_ID
        ) CHAT_CONTENT, max (E.type) keep (
        DENSE_RANK last
        order by
        E.CREATEAT,
        E.CHAT_ID
        ) CHAT_TYPE, max (E.STATUS) keep (
        DENSE_RANK last
        order by
        E.CREATEAT,
        E.CHAT_ID
        ) CHAT_STATUS, max (E.CREATEAT) keep (
        DENSE_RANK last
        order by
        E.CREATEAT,
        E.CHAT_ID
        ) CHAT_CREATEAT
        from KAKAO_CHATS E
        where E.TYPE in (1, 2)
        and E.CREATEAT >= (select NVL(B.CREATEAT, sysdate)
        from KAKAO_READ_USERS B
        where B.EMAIL = #{email}
        and B.ROOM_ID = E.ROOM_ID)
        group by E.ROOM_ID) G on C.ROOM_ID = G.ROOM_ID
        join kakao_join_users D on C.ROOM_ID = D.ROOM_ID
        join KAKAO_READ_USERS G on G.ROOM_ID = D.ROOM_ID and G.EMAIL = D.EMAIL
        left outer join CUTOFF_RS E on D.EMAIL = E.TO_ID
        join KAKAO_USERS F on D.EMAIl = F.EMAIL
        where B.EMAIL = #{email}
        and G.room_id is not null
        and B.STATUS = 1
        and D.STATUS = 1
        group by C.ROOM_ID,
        C.NAME,
        C.TYPE,
        C.CREATEAT,
        G.CHAT_CONTENT,
        G.CHAT_TYPE,
        G.CHAT_STATUS,
        G.CHAT_CREATEAT
        order by CHAT_CREATEAT desc
    </select>

    <select id="selectRoom" parameterType="java.util.Map" resultMap="dto.roomInfo">
        <include refid="common.CUTOFF_RS">
            <property name="email" value="${email}"/>
            <property name="target" value="from"/>
            <property name="who" value="from"/>
        </include>
        select C.room_id as ROOM_ID,
        nvl(C.NAME, '') as ROOM_NAME,
        '[' || LISTAGG(
        '{' ||
        ' "id" : "' || F.ID || '",' ||
        ' "name" : "' || nvl(DECODE(E.CUTOFF_RS, 1, E.nickname, null), F.NAME) || '",' ||
        ' "email" : "' || D.EMAIL || '",' ||
        ' "message" : "' || DECODE(E.CUTOFF_RS, 1, F.MESSAGE, null) || '",' ||
        ' "provider" : "' || F.PROVIDER || '",' ||
        ' "lastReadChat" : "' || G.CHAT_ID || '",' ||
        ' "profileImageUrl" : "' || F.profile_image_url || '",' ||
        ' "status" : "' || NVL(E.status, 0) || '"' ||
        '}', ', ')
        within group ( order by E.nickname, F.NAME) || ']' as USERS,
        C.type as ROOM_TYPE,
        count(D.EMAIL) as JOIN_USER_CNT,
        DECODE(G.CHAT_STATUS, 1, G.CHAT_CONTENT, null) as CHAT_CONTENT,
        NVL(G.CHAT_TYPE, null) AS CHAT_TYPE,
        NVL(G.CHAT_STATUS, null) AS CHAT_STATUS,
        NVL2(G.CHAT_CREATEAT, to_char(G.CHAT_CREATEAT, 'YYYY-MM-DD HH24:MI:SS'),null) as CHAT_CREATEAT,
        to_char(C.CREATEAT, 'YYYY-MM-DD HH24:MI:SS') as ROOM_CREATEAT
        from kakao_join_users B
        join kakao_rooms C
        on B.ROOM_ID = C.ROOM_ID
        left outer join (select E.ROOM_ID,
        max (E.CONTENT) keep (
        DENSE_RANK last
        order by
        E.CREATEAT,
        E.CHAT_ID
        ) CHAT_CONTENT, max (E.type) keep (
        DENSE_RANK last
        order by
        E.CREATEAT,
        E.CHAT_ID
        ) CHAT_TYPE, max (E.STATUS) keep (
        DENSE_RANK last
        order by
        E.CREATEAT,
        E.CHAT_ID
        ) CHAT_STATUS, max (E.CREATEAT) keep (
        DENSE_RANK last
        order by
        E.CREATEAT,
        E.CHAT_ID
        ) CHAT_CREATEAT
        from KAKAO_CHATS E
        where E.TYPE in (1, 2)
        and E.CREATEAT >= (select NVL(B.CREATEAT, sysdate)
        from KAKAO_READ_USERS B
        where B.EMAIL = #{email}
        and B.ROOM_ID = E.ROOM_ID)
        group by E.ROOM_ID) G on C.ROOM_ID = G.ROOM_ID
        join kakao_join_users D on C.ROOM_ID = D.ROOM_ID
        join KAKAO_READ_USERS G on G.ROOM_ID = D.ROOM_ID and G.EMAIL = D.EMAIL
        left outer join CUTOFF_RS E on D.EMAIL = E.TO_ID
        join KAKAO_USERS F on D.EMAIl = F.EMAIL
        where B.EMAIL = #{email}
        and C.ROOM_ID = #{roomId, jdbcType=VARCHAR}
        and B.STATUS = 1
        and D.STATUS = 1
        group by C.ROOM_ID,
        C.NAME,
        C.TYPE,
        C.CREATEAT,
        G.CHAT_CONTENT,
        G.CHAT_TYPE,
        G.CHAT_STATUS,
        G.CHAT_CREATEAT
    </select>

    <update id="updateRoom" parameterType="com.oauth2.sample.domain.room.request.UpdateRoomRequest">
        update KAKAO_ROOMS
        set name = #{roomName}
        where ROOM_ID = #{roomId}
    </update>

    <select id="existUser" parameterType="java.util.Map" resultType="java.lang.Integer">
        select 1
        from KAKAO_JOIN_USERS A
        where A.EMAIL = #{email}
          and A.ROOM_ID = #{roomId}
          and status = 1
    </select>

    <insert id="inviteUserToRoom" parameterType="com.oauth2.sample.domain.room.request.InviteRoomRequest">
        MERGE
        INTO KAKAO_JOIN_USERS A
        USING (SELECT
        #{email} AS EMAIL,
        #{roomId} AS ROOM_ID,
        <choose>
            <when test="createAt != '' and createAt != null">
                to_date(#{createAt}, 'YYYY-MM-DD HH24:MI:SS')
            </when>
            <otherwise>
                sysdate
            </otherwise>
        </choose>
        AS CREATEAT
        from dual) B
        ON (A.EMAIL = B.EMAIL and A.ROOM_ID = B.ROOM_ID)
        WHEN MATCHED THEN
        UPDATE SET A.STATUS = 1, A.CREATEAT = B.CREATEAT
        WHEN NOT MATCHED THEN
        INSERT
        (
        ROOM_ID,
        EMAIL,
        STATUS,
        CREATEAT
        )
        VALUES (B.ROOM_ID, B.EMAIL, 1, B.CREATEAT)
    </insert>

    <insert id="insertRoom" parameterType="com.oauth2.sample.domain.room.dto.InsertRoom">
        <selectKey keyProperty="roomId" resultType="String" order="BEFORE">
            select KAKAO_ROOMS_SEQ.nextval from dual
        </selectKey>
        insert into KAKAO_ROOMS (ROOM_ID, NAME, TYPE, STATUS, CREATEAT)
        values (
        #{roomId},
        #{roomName, jdbcType=VARCHAR},
        #{type},
        1,
        sysdate
        )
    </insert>

    <update id="removeJoinUser" parameterType="java.util.Map">
        update KAKAO_JOIN_USERS
        set STATUS = 2
        where EMAIL = #{email}
          and ROOM_ID = #{roomId}
    </update>

    <select id="isPresent" parameterType="java.util.Map" resultType="java.lang.Integer">
        select 1
        from kakao_rooms
        where room_id = #{roomId, jdbcType=VARCHAR}
    </select>

    <select id="selectFriendRoomId" parameterType="java.util.Map" resultType="Integer">
        select A.room_id AS roomId
        from kakao_rooms A
        WHERE type = '1'
          AND EXISTS(select 1 from kakao_join_users B where A.ROOM_ID = B.ROOM_ID AND email = #{fromId})
          AND EXISTS(select 1 from kakao_join_users B where A.ROOM_ID = B.ROOM_ID AND email = #{toId})
    </select>

    <select id="selectReaderChat" parameterType="java.lang.String" resultType="java.lang.String">
        select chat_id
        from kakao_read_users
        where room_id = #{roomId}
    </select>
</mapper>